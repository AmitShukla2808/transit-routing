GTFS preprocessing
====================

- Sample GTFS set source - https://transitfeeds.com/
- Due to the irregularities in the GTFS set, several preprocessing filters were applied. E.g.
    - Route Ids are integer and start from 1000.
    - Trip Ids string of format a_b, where a is route Id and b is the sequence number of the trip when arranged in ascending order (according to departure time from the first stop).
    - Stop Ids are integer and start from 1.
    - Stop sequence in stoptimes.txt file is made continuous.
    - Overlapping trips along a route are removed
    - Disjoint routes (i.e., routes which cannot be reached from any other route in the network) are removed. These generally include waterways, airways.
    - The timetable provided is for a day. All the timestamps are converted into pandas.datetime format.
    - calendar_dates can be used in two sense. In the first case, it acts as a supplement to calendar.txt by defining listing the service id removed or added on a particular day (recommended usage).In the second case, it acts independently by listing all the service active on the particular day. See  GTFS reference for more details. Currently only first type of functionality is supported. 
  For implementation details, see `GTFS_wrapper.py <https://github.com/transnetlab/transit-routing/blob/main/GTFS_wrapper.py>`_.

- `build_transfer_file.py <https://github.com/transnetlab/transit-routing/blob/main/build_transfer_file.py>`_. has been provided to transfers_file.txt. This module requires OSMNX package. Following inputs are required:
    - The graph (if not found on disk) is extracted using `OpenStreetMaps <https://www.openstreetmap.org/#map=4/21.84/82.79>`_    
    - For every stop, shortest path comutation is performaed within a radius maximum walking limit.
    - Ensures the transitive closure of footpaths. 
  Following additional inputs are required. 
    - WALKING_LIMIT (int)- Maximum allowed walking time. Note that the final transfers file can have longer transfers due to transitive closure. 
    - CORES (int): Number of codes to be used. Shortest path computation can be done in parallel. 


- For faster lookup, the GTFS set is post-processed into several dictionaries and provided as pickle files. 
    - stops_dict_pkl: Contains stops along the route. Format: {route_id: list of stops}
    - stoptimes_dict_pkl: Contains trips along a route. Format: {route_id: [trip_1, trip_2]}
    - transfers_dict_full: Contains footpath details. Format: {stop_id: [(stop_id, time)]}
    - routes_by_stop: All routes passing from a given stop id. Format: {stop_id: list of routes}
    - idx_by_route_stop: Gives the index of a stop along a route. Format: {(route_id, stop_id): index}

  Functions for building these dicts from the GTFS set are present in `dict_builder.py <https://github.com/transnetlab/transit-routing/blob/main/dict_builder/dict_builder_functions.py>`_.
- For algorithms working in TBTR environment, an additional TBTR_trip_transfer_dict is defined. For a given trip Id, it stores the list of trip-transfers available from it. Code for same will be updated soon