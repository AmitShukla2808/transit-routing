Quickstart
==========

Requirements
------------
- A 64-bit operating system. Linux, MacOS and Windows are currently supported.
- Python version 3.7 or higher
- Python Modules: tqdm, pandas, numpy, pickle, networkx


Running Test cases
-------------------
 #. Clone the repository using following command:

    .. code-block:: bash

       gh repo clone transnetlab/transit-routing

 #. Run the following commands inside transit-routing-main directory. In case of error, edit `main.py <https://github.com/transnetlab/transit-routing/blob/main/main.py>`_

    .. code-block:: bash

         pip install -r requirements.txt
         python main.py

 #. Enter following parameters when prompted:

    .. code-block:: python

        Network name: anaheim
        Date: 20220630
        Bus routes: 3, -1
        build transfers file: 0
        build TBTR files: 1
        use test case: 1
        RAPTOR environment: 0
        Standard RAPTOR: 0

 #. Following output should be displayed:

    .. code-block:: python

         ___________________Query Parameters__________________
         Network: ./anaheim
         SOURCE stop id: 43
         DESTINATION stop id: 4
         Maximum Transfer allowed: 4
         Is walking from SOURCE allowed ?: 1
         Earliest departure time: 2022-06-30 05:41:00
         _____________________________________________________
         from 43 board at 05:46:00 and get down on 2 at 06:03:00 along 1022_0
         from 2 walk till  47.0 for 14.4 seconds
         from 47 board at 16:07:00 and get down on 9 at 16:23:00 along 1038_0
         from 9 walk till  33.0 for 15.0 seconds
         from 33 board at 16:28:00 and get down on 55 at 16:29:00 along 1004_72
         from 55 board at 19:30:00 and get down on 4 at 19:37:32 along 1015_0
         ####################################
         Optimal arrival time are: [[Timestamp('2022-06-30 19:37:32')]]


Running your instance
------------------
Due to inconsistencies in the GTFS sets available online, they cannot be used directly.
Moreover, a significant amount of preprocessing (e.g., transitively closed footpaths,
non-overtaking trips, continuous stop sequence) is required. The `Chicago <https://transitfeeds.com/p/chicago-transit-authority/165>`_ test network
is generated in accordance with these. `GTFS_wrapper.py <https://github.com/transnetlab/transit-routing/blob/main/GTFS_wrapper.py>`_ provides the functions to convert GTFS set into required format. See GTFS preprocessing for further details.


Rename your GTFS.zip to network_GTFS.zip (e.g. chicago_GTFS.zip) and place it in main directory. Run `main.py <https://github.com/transnetlab/transit-routing/blob/main/main.py>`_ and
enter the variables accordingly.

Once the GTFS set is processed successfully, directly run `query_file.py <https://github.com/transnetlab/transit-routing/blob/main/query_file.py>`_ to find shortest paths.

Additional notes
------------------
- To print complete itinerary, set **PRINT_ITINERARY** = 1 and **OPTIMIZED** = 0.
- Additional target pruning is applied in the footpath phase of all RAPTOR related algorithms.
- To compare the output of RAPTOR and TBTR, **WALKING_FROM_SOURCE** must be set to 1.
- Post processing in rRAPTOR and rTBTR gives the set of optimal trips (or routes id **OPTIMIZED**=0) required to cover all optimal journeys. However, the output set by rRAPTOR and rTBTR might not match. To understand this, imagine two different journeys with the same arrival times and number of transfers. Since, all algorithms are coded using strict dominance, only one of the two will be detected. While the rRAPTOR might include the first journey, rTBTR can include second. In such cases, algorithm's correctness can be checked by comparing the optimal arrival times (which should be same).

