Quickstart
==========

Requirements
------------
- A 64-bit operating system. Linux, MacOS and Windows are currently supported.
- Python version 3.7 or higher
- Python Modules: tqdm, pandas, numpy, pickle, networkx


Running Test cases
-------------------
 #. Clone the repository using following command:

    .. code-block:: bash

       gh repo clone transnetlab/transit-routing

 #. Run the following commands inside transit-routing-main directory. In case of error, edit `main.py <https://github.com/transnetlab/transit-routing/blob/main/main.py>`_

    .. code-block:: bash

         pip install -r requirements.txt
         python main.py

 #. Enter following parameters when prompted:

    .. code-block:: python

        Network name: Chicago
        Date: 20220815
        Bus routes: 3, -1
        build transfers file: 0
        build TBTR files: 0
        use test case: 1
        RAPTOR environment: 0
        Standard RAPTOR: 0

 #. Following output should be displayed:

    .. code-block:: python

        ___________________Query Parameters__________________
        Network: ./chicago
        SOURCE stop id: 6465
        DESTINATION stop id: 8781
        Maximum Transfer allowed: 4
        Is walking from SOURCE allowed ?: 1
        Earliest departure time: 2022-08-15 00:00:00
        _____________________________________________________
        from 6465 walk till  2651.0 for 51.7 seconds
        from 2651 board at 00:24:06 and get down on 3685 at 00:26:04 along 1045_0
        from 3685 walk till  1929.0 for 144.6 seconds
        from 1929 board at 00:52:03 and get down on 7906 at 01:01:44 along 1392_1
        from 7906 board at 04:04:35 and get down on 8781 at 04:06:46 along 1432_1
        ####################################
        from 6465 board at 05:03:01 and get down on 2300 at 05:12:00 along 1549_0
        from 2300 board at 05:27:00 and get down on 8781 at 05:34:58 along 1432_4
        ####################################
        Optimal arrival time are: [[Timestamp('2022-08-15 04:06:46'), Timestamp('2022-08-15 05:34:58')]]


Running your instance
------------------
Due to inconsistencies in the GTFS sets available online, they cannot be used directly.
Moreover, a significant amount of preprocessing (e.g., transitively closed footpaths,
non-overtaking trips, continuous stop sequence) is required. The `Chicago <https://transitfeeds.com/p/chicago-transit-authority/165>`_ test network
is generated in accordance with these. `GTFS_wrapper.py <https://github.com/transnetlab/transit-routing/blob/main/GTFS_wrapper.py>`_ provides the functions to convert GTFS set into required format. See GTFS preprocessing for further details.


Rename your GTFS.zip to network_GTFS.zip (e.g. chicago_GTFS.zip) and place it in main directory. Run `main.py <https://github.com/transnetlab/transit-routing/blob/main/main.py>`_ and
enter the variables accordingly.

Once the GTFS set is processed successfully, directly run `query_file.py <https://github.com/transnetlab/transit-routing/blob/main/query_file.py>`_ to find shortest paths.

Additional notes
------------------
- To print complete itinerary, set **PRINT_ITINERARY** = 1 and **OPTIMIZED** = 0.
- Additional target pruning is applied in the footpath phase of all RAPTOR related algorithms.
- To compare the output of RAPTOR and TBTR, **WALKING_FROM_SOURCE** must be set to 1.
- Post processing in rRAPTOR and rTBTR gives the set of optimal trips (or routes id **OPTIMIZED**=0) required to cover all optimal journeys. However, the output set by rRAPTOR and rTBTR might not match. To understand this, imagine two different journeys with the same arrival times and number of transfers. Since, all algorithms are coded using strict dominance, only one of the two will be detected. While the rRAPTOR might include the first journey, rTBTR can include second. In such cases, algorithm's correctness can be checked by comparing the optimal arrival times (which should be same).

